// Code generated by MockGen. DO NOT EDIT.
// Source: context.go

// Package handlers is a generated GoMock package.
package mock

import (
	gin "github.com/gin-gonic/gin"
	binding "github.com/gin-gonic/gin/binding"
	render "github.com/gin-gonic/gin/render"
	gomock "github.com/golang/mock/gomock"
	io "io"
	multipart "mime/multipart"
	http "net/http"
	reflect "reflect"
	time "time"
)

// MockContext is a mock of Context interface.
type MockContext struct {
	ctrl     *gomock.Controller
	recorder *MockContextMockRecorder
}

// MockContextMockRecorder is the mock recorder for MockContext.
type MockContextMockRecorder struct {
	mock *MockContext
}

// NewMockContext creates a new mock instance.
func NewMockContext(ctrl *gomock.Controller) *MockContext {
	mock := &MockContext{ctrl: ctrl}
	mock.recorder = &MockContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContext) EXPECT() *MockContextMockRecorder {
	return m.recorder
}

// Copy mocks base method.
func (m *MockContext) Copy() *gin.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Copy")
	ret0, _ := ret[0].(*gin.Context)
	return ret0
}

// Copy indicates an expected call of Copy.
func (mr *MockContextMockRecorder) Copy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockContext)(nil).Copy))
}

// HandlerName mocks base method.
func (m *MockContext) HandlerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandlerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// HandlerName indicates an expected call of HandlerName.
func (mr *MockContextMockRecorder) HandlerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlerName", reflect.TypeOf((*MockContext)(nil).HandlerName))
}

// HandlerNames mocks base method.
func (m *MockContext) HandlerNames() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandlerNames")
	ret0, _ := ret[0].([]string)
	return ret0
}

// HandlerNames indicates an expected call of HandlerNames.
func (mr *MockContextMockRecorder) HandlerNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlerNames", reflect.TypeOf((*MockContext)(nil).HandlerNames))
}

// Handler mocks base method.
func (m *MockContext) Handler() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handler")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// Handler indicates an expected call of Handler.
func (mr *MockContextMockRecorder) Handler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handler", reflect.TypeOf((*MockContext)(nil).Handler))
}

// FullPath mocks base method.
func (m *MockContext) FullPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// FullPath indicates an expected call of FullPath.
func (mr *MockContextMockRecorder) FullPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullPath", reflect.TypeOf((*MockContext)(nil).FullPath))
}

// Next mocks base method.
func (m *MockContext) Next() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Next")
}

// Next indicates an expected call of Next.
func (mr *MockContextMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockContext)(nil).Next))
}

// IsAborted mocks base method.
func (m *MockContext) IsAborted() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAborted")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAborted indicates an expected call of IsAborted.
func (mr *MockContextMockRecorder) IsAborted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAborted", reflect.TypeOf((*MockContext)(nil).IsAborted))
}

// Abort mocks base method.
func (m *MockContext) Abort() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Abort")
}

// Abort indicates an expected call of Abort.
func (mr *MockContextMockRecorder) Abort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Abort", reflect.TypeOf((*MockContext)(nil).Abort))
}

// AbortWithStatus mocks base method.
func (m *MockContext) AbortWithStatus(code int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AbortWithStatus", code)
}

// AbortWithStatus indicates an expected call of AbortWithStatus.
func (mr *MockContextMockRecorder) AbortWithStatus(code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortWithStatus", reflect.TypeOf((*MockContext)(nil).AbortWithStatus), code)
}

// AbortWithStatusJSON mocks base method.
func (m *MockContext) AbortWithStatusJSON(code int, jsonObj interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AbortWithStatusJSON", code, jsonObj)
}

// AbortWithStatusJSON indicates an expected call of AbortWithStatusJSON.
func (mr *MockContextMockRecorder) AbortWithStatusJSON(code, jsonObj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortWithStatusJSON", reflect.TypeOf((*MockContext)(nil).AbortWithStatusJSON), code, jsonObj)
}

// AbortWithError mocks base method.
func (m *MockContext) AbortWithError(code int, err error) *gin.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AbortWithError", code, err)
	ret0, _ := ret[0].(*gin.Error)
	return ret0
}

// AbortWithError indicates an expected call of AbortWithError.
func (mr *MockContextMockRecorder) AbortWithError(code, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortWithError", reflect.TypeOf((*MockContext)(nil).AbortWithError), code, err)
}

// Error mocks base method.
func (m *MockContext) Error(err error) *gin.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error", err)
	ret0, _ := ret[0].(*gin.Error)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockContextMockRecorder) Error(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockContext)(nil).Error), err)
}

// Set mocks base method.
func (m *MockContext) Set(key string, value interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", key, value)
}

// Set indicates an expected call of Set.
func (mr *MockContextMockRecorder) Set(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockContext)(nil).Set), key, value)
}

// Get mocks base method.
func (m *MockContext) Get(key string) (interface{}, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockContextMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockContext)(nil).Get), key)
}

// MustGet mocks base method.
func (m *MockContext) MustGet(key string) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MustGet", key)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// MustGet indicates an expected call of MustGet.
func (mr *MockContextMockRecorder) MustGet(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustGet", reflect.TypeOf((*MockContext)(nil).MustGet), key)
}

// GetString mocks base method.
func (m *MockContext) GetString(key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetString", key)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetString indicates an expected call of GetString.
func (mr *MockContextMockRecorder) GetString(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetString", reflect.TypeOf((*MockContext)(nil).GetString), key)
}

// GetBool mocks base method.
func (m *MockContext) GetBool(key string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBool", key)
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetBool indicates an expected call of GetBool.
func (mr *MockContextMockRecorder) GetBool(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBool", reflect.TypeOf((*MockContext)(nil).GetBool), key)
}

// GetInt mocks base method.
func (m *MockContext) GetInt(key string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInt", key)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetInt indicates an expected call of GetInt.
func (mr *MockContextMockRecorder) GetInt(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInt", reflect.TypeOf((*MockContext)(nil).GetInt), key)
}

// GetInt64 mocks base method.
func (m *MockContext) GetInt64(key string) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInt64", key)
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetInt64 indicates an expected call of GetInt64.
func (mr *MockContextMockRecorder) GetInt64(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInt64", reflect.TypeOf((*MockContext)(nil).GetInt64), key)
}

// GetFloat64 mocks base method.
func (m *MockContext) GetFloat64(key string) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFloat64", key)
	ret0, _ := ret[0].(float64)
	return ret0
}

// GetFloat64 indicates an expected call of GetFloat64.
func (mr *MockContextMockRecorder) GetFloat64(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFloat64", reflect.TypeOf((*MockContext)(nil).GetFloat64), key)
}

// GetTime mocks base method.
func (m *MockContext) GetTime(key string) time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTime", key)
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetTime indicates an expected call of GetTime.
func (mr *MockContextMockRecorder) GetTime(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTime", reflect.TypeOf((*MockContext)(nil).GetTime), key)
}

// GetDuration mocks base method.
func (m *MockContext) GetDuration(key string) time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDuration", key)
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetDuration indicates an expected call of GetDuration.
func (mr *MockContextMockRecorder) GetDuration(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDuration", reflect.TypeOf((*MockContext)(nil).GetDuration), key)
}

// GetStringSlice mocks base method.
func (m *MockContext) GetStringSlice(key string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStringSlice", key)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetStringSlice indicates an expected call of GetStringSlice.
func (mr *MockContextMockRecorder) GetStringSlice(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStringSlice", reflect.TypeOf((*MockContext)(nil).GetStringSlice), key)
}

// GetStringMap mocks base method.
func (m *MockContext) GetStringMap(key string) map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStringMap", key)
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// GetStringMap indicates an expected call of GetStringMap.
func (mr *MockContextMockRecorder) GetStringMap(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStringMap", reflect.TypeOf((*MockContext)(nil).GetStringMap), key)
}

// GetStringMapString mocks base method.
func (m *MockContext) GetStringMapString(key string) map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStringMapString", key)
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetStringMapString indicates an expected call of GetStringMapString.
func (mr *MockContextMockRecorder) GetStringMapString(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStringMapString", reflect.TypeOf((*MockContext)(nil).GetStringMapString), key)
}

// GetStringMapStringSlice mocks base method.
func (m *MockContext) GetStringMapStringSlice(key string) map[string][]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStringMapStringSlice", key)
	ret0, _ := ret[0].(map[string][]string)
	return ret0
}

// GetStringMapStringSlice indicates an expected call of GetStringMapStringSlice.
func (mr *MockContextMockRecorder) GetStringMapStringSlice(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStringMapStringSlice", reflect.TypeOf((*MockContext)(nil).GetStringMapStringSlice), key)
}

// Param mocks base method.
func (m *MockContext) Param(key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Param", key)
	ret0, _ := ret[0].(string)
	return ret0
}

// Param indicates an expected call of Param.
func (mr *MockContextMockRecorder) Param(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Param", reflect.TypeOf((*MockContext)(nil).Param), key)
}

// Query mocks base method.
func (m *MockContext) Query(key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", key)
	ret0, _ := ret[0].(string)
	return ret0
}

// Query indicates an expected call of Query.
func (mr *MockContextMockRecorder) Query(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockContext)(nil).Query), key)
}

// DefaultQuery mocks base method.
func (m *MockContext) DefaultQuery(key, defaultValue string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultQuery", key, defaultValue)
	ret0, _ := ret[0].(string)
	return ret0
}

// DefaultQuery indicates an expected call of DefaultQuery.
func (mr *MockContextMockRecorder) DefaultQuery(key, defaultValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultQuery", reflect.TypeOf((*MockContext)(nil).DefaultQuery), key, defaultValue)
}

// GetQuery mocks base method.
func (m *MockContext) GetQuery(key string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuery", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetQuery indicates an expected call of GetQuery.
func (mr *MockContextMockRecorder) GetQuery(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuery", reflect.TypeOf((*MockContext)(nil).GetQuery), key)
}

// QueryArray mocks base method.
func (m *MockContext) QueryArray(key string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryArray", key)
	ret0, _ := ret[0].([]string)
	return ret0
}

// QueryArray indicates an expected call of QueryArray.
func (mr *MockContextMockRecorder) QueryArray(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryArray", reflect.TypeOf((*MockContext)(nil).QueryArray), key)
}

// GetQueryArray mocks base method.
func (m *MockContext) GetQueryArray(key string) ([]string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueryArray", key)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetQueryArray indicates an expected call of GetQueryArray.
func (mr *MockContextMockRecorder) GetQueryArray(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueryArray", reflect.TypeOf((*MockContext)(nil).GetQueryArray), key)
}

// QueryMap mocks base method.
func (m *MockContext) QueryMap(key string) map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryMap", key)
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// QueryMap indicates an expected call of QueryMap.
func (mr *MockContextMockRecorder) QueryMap(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMap", reflect.TypeOf((*MockContext)(nil).QueryMap), key)
}

// GetQueryMap mocks base method.
func (m *MockContext) GetQueryMap(key string) (map[string]string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueryMap", key)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetQueryMap indicates an expected call of GetQueryMap.
func (mr *MockContextMockRecorder) GetQueryMap(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueryMap", reflect.TypeOf((*MockContext)(nil).GetQueryMap), key)
}

// PostForm mocks base method.
func (m *MockContext) PostForm(key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostForm", key)
	ret0, _ := ret[0].(string)
	return ret0
}

// PostForm indicates an expected call of PostForm.
func (mr *MockContextMockRecorder) PostForm(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostForm", reflect.TypeOf((*MockContext)(nil).PostForm), key)
}

// DefaultPostForm mocks base method.
func (m *MockContext) DefaultPostForm(key, defaultValue string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultPostForm", key, defaultValue)
	ret0, _ := ret[0].(string)
	return ret0
}

// DefaultPostForm indicates an expected call of DefaultPostForm.
func (mr *MockContextMockRecorder) DefaultPostForm(key, defaultValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultPostForm", reflect.TypeOf((*MockContext)(nil).DefaultPostForm), key, defaultValue)
}

// GetPostForm mocks base method.
func (m *MockContext) GetPostForm(key string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostForm", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetPostForm indicates an expected call of GetPostForm.
func (mr *MockContextMockRecorder) GetPostForm(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostForm", reflect.TypeOf((*MockContext)(nil).GetPostForm), key)
}

// PostFormArray mocks base method.
func (m *MockContext) PostFormArray(key string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostFormArray", key)
	ret0, _ := ret[0].([]string)
	return ret0
}

// PostFormArray indicates an expected call of PostFormArray.
func (mr *MockContextMockRecorder) PostFormArray(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostFormArray", reflect.TypeOf((*MockContext)(nil).PostFormArray), key)
}

// GetPostFormArray mocks base method.
func (m *MockContext) GetPostFormArray(key string) ([]string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostFormArray", key)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetPostFormArray indicates an expected call of GetPostFormArray.
func (mr *MockContextMockRecorder) GetPostFormArray(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostFormArray", reflect.TypeOf((*MockContext)(nil).GetPostFormArray), key)
}

// PostFormMap mocks base method.
func (m *MockContext) PostFormMap(key string) map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostFormMap", key)
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// PostFormMap indicates an expected call of PostFormMap.
func (mr *MockContextMockRecorder) PostFormMap(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostFormMap", reflect.TypeOf((*MockContext)(nil).PostFormMap), key)
}

// GetPostFormMap mocks base method.
func (m *MockContext) GetPostFormMap(key string) (map[string]string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostFormMap", key)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetPostFormMap indicates an expected call of GetPostFormMap.
func (mr *MockContextMockRecorder) GetPostFormMap(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostFormMap", reflect.TypeOf((*MockContext)(nil).GetPostFormMap), key)
}

// FormFile mocks base method.
func (m *MockContext) FormFile(name string) (*multipart.FileHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormFile", name)
	ret0, _ := ret[0].(*multipart.FileHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FormFile indicates an expected call of FormFile.
func (mr *MockContextMockRecorder) FormFile(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormFile", reflect.TypeOf((*MockContext)(nil).FormFile), name)
}

// MultipartForm mocks base method.
func (m *MockContext) MultipartForm() (*multipart.Form, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultipartForm")
	ret0, _ := ret[0].(*multipart.Form)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultipartForm indicates an expected call of MultipartForm.
func (mr *MockContextMockRecorder) MultipartForm() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultipartForm", reflect.TypeOf((*MockContext)(nil).MultipartForm))
}

// SaveUploadedFile mocks base method.
func (m *MockContext) SaveUploadedFile(file *multipart.FileHeader, dst string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUploadedFile", file, dst)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUploadedFile indicates an expected call of SaveUploadedFile.
func (mr *MockContextMockRecorder) SaveUploadedFile(file, dst interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUploadedFile", reflect.TypeOf((*MockContext)(nil).SaveUploadedFile), file, dst)
}

// Bind mocks base method.
func (m *MockContext) Bind(obj interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bind", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// Bind indicates an expected call of Bind.
func (mr *MockContextMockRecorder) Bind(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bind", reflect.TypeOf((*MockContext)(nil).Bind), obj)
}

// BindJSON mocks base method.
func (m *MockContext) BindJSON(obj interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindJSON", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindJSON indicates an expected call of BindJSON.
func (mr *MockContextMockRecorder) BindJSON(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindJSON", reflect.TypeOf((*MockContext)(nil).BindJSON), obj)
}

// BindXML mocks base method.
func (m *MockContext) BindXML(obj interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindXML", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindXML indicates an expected call of BindXML.
func (mr *MockContextMockRecorder) BindXML(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindXML", reflect.TypeOf((*MockContext)(nil).BindXML), obj)
}

// BindQuery mocks base method.
func (m *MockContext) BindQuery(obj interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindQuery", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindQuery indicates an expected call of BindQuery.
func (mr *MockContextMockRecorder) BindQuery(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindQuery", reflect.TypeOf((*MockContext)(nil).BindQuery), obj)
}

// BindYAML mocks base method.
func (m *MockContext) BindYAML(obj interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindYAML", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindYAML indicates an expected call of BindYAML.
func (mr *MockContextMockRecorder) BindYAML(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindYAML", reflect.TypeOf((*MockContext)(nil).BindYAML), obj)
}

// BindHeader mocks base method.
func (m *MockContext) BindHeader(obj interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindHeader", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindHeader indicates an expected call of BindHeader.
func (mr *MockContextMockRecorder) BindHeader(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindHeader", reflect.TypeOf((*MockContext)(nil).BindHeader), obj)
}

// BindUri mocks base method.
func (m *MockContext) BindUri(obj interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindUri", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindUri indicates an expected call of BindUri.
func (mr *MockContextMockRecorder) BindUri(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindUri", reflect.TypeOf((*MockContext)(nil).BindUri), obj)
}

// MustBindWith mocks base method.
func (m *MockContext) MustBindWith(obj interface{}, b binding.Binding) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MustBindWith", obj, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// MustBindWith indicates an expected call of MustBindWith.
func (mr *MockContextMockRecorder) MustBindWith(obj, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustBindWith", reflect.TypeOf((*MockContext)(nil).MustBindWith), obj, b)
}

// ShouldBind mocks base method.
func (m *MockContext) ShouldBind(obj interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldBind", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShouldBind indicates an expected call of ShouldBind.
func (mr *MockContextMockRecorder) ShouldBind(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldBind", reflect.TypeOf((*MockContext)(nil).ShouldBind), obj)
}

// ShouldBindJSON mocks base method.
func (m *MockContext) ShouldBindJSON(obj interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldBindJSON", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShouldBindJSON indicates an expected call of ShouldBindJSON.
func (mr *MockContextMockRecorder) ShouldBindJSON(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldBindJSON", reflect.TypeOf((*MockContext)(nil).ShouldBindJSON), obj)
}

// ShouldBindXML mocks base method.
func (m *MockContext) ShouldBindXML(obj interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldBindXML", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShouldBindXML indicates an expected call of ShouldBindXML.
func (mr *MockContextMockRecorder) ShouldBindXML(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldBindXML", reflect.TypeOf((*MockContext)(nil).ShouldBindXML), obj)
}

// ShouldBindQuery mocks base method.
func (m *MockContext) ShouldBindQuery(obj interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldBindQuery", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShouldBindQuery indicates an expected call of ShouldBindQuery.
func (mr *MockContextMockRecorder) ShouldBindQuery(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldBindQuery", reflect.TypeOf((*MockContext)(nil).ShouldBindQuery), obj)
}

// ShouldBindYAML mocks base method.
func (m *MockContext) ShouldBindYAML(obj interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldBindYAML", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShouldBindYAML indicates an expected call of ShouldBindYAML.
func (mr *MockContextMockRecorder) ShouldBindYAML(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldBindYAML", reflect.TypeOf((*MockContext)(nil).ShouldBindYAML), obj)
}

// ShouldBindHeader mocks base method.
func (m *MockContext) ShouldBindHeader(obj interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldBindHeader", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShouldBindHeader indicates an expected call of ShouldBindHeader.
func (mr *MockContextMockRecorder) ShouldBindHeader(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldBindHeader", reflect.TypeOf((*MockContext)(nil).ShouldBindHeader), obj)
}

// ShouldBindUri mocks base method.
func (m *MockContext) ShouldBindUri(obj interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldBindUri", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShouldBindUri indicates an expected call of ShouldBindUri.
func (mr *MockContextMockRecorder) ShouldBindUri(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldBindUri", reflect.TypeOf((*MockContext)(nil).ShouldBindUri), obj)
}

// ShouldBindWith mocks base method.
func (m *MockContext) ShouldBindWith(obj interface{}, b binding.Binding) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldBindWith", obj, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShouldBindWith indicates an expected call of ShouldBindWith.
func (mr *MockContextMockRecorder) ShouldBindWith(obj, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldBindWith", reflect.TypeOf((*MockContext)(nil).ShouldBindWith), obj, b)
}

// ShouldBindBodyWith mocks base method.
func (m *MockContext) ShouldBindBodyWith(obj interface{}, bb binding.BindingBody) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldBindBodyWith", obj, bb)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShouldBindBodyWith indicates an expected call of ShouldBindBodyWith.
func (mr *MockContextMockRecorder) ShouldBindBodyWith(obj, bb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldBindBodyWith", reflect.TypeOf((*MockContext)(nil).ShouldBindBodyWith), obj, bb)
}

// ClientIP mocks base method.
func (m *MockContext) ClientIP() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientIP")
	ret0, _ := ret[0].(string)
	return ret0
}

// ClientIP indicates an expected call of ClientIP.
func (mr *MockContextMockRecorder) ClientIP() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientIP", reflect.TypeOf((*MockContext)(nil).ClientIP))
}

// ContentType mocks base method.
func (m *MockContext) ContentType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContentType")
	ret0, _ := ret[0].(string)
	return ret0
}

// ContentType indicates an expected call of ContentType.
func (mr *MockContextMockRecorder) ContentType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContentType", reflect.TypeOf((*MockContext)(nil).ContentType))
}

// IsWebsocket mocks base method.
func (m *MockContext) IsWebsocket() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsWebsocket")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsWebsocket indicates an expected call of IsWebsocket.
func (mr *MockContextMockRecorder) IsWebsocket() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsWebsocket", reflect.TypeOf((*MockContext)(nil).IsWebsocket))
}

// Status mocks base method.
func (m *MockContext) Status(code int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Status", code)
}

// Status indicates an expected call of Status.
func (mr *MockContextMockRecorder) Status(code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockContext)(nil).Status), code)
}

// Header mocks base method.
func (m *MockContext) Header(key, value string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Header", key, value)
}

// Header indicates an expected call of Header.
func (mr *MockContextMockRecorder) Header(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockContext)(nil).Header), key, value)
}

// GetHeader mocks base method.
func (m *MockContext) GetHeader(key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeader", key)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHeader indicates an expected call of GetHeader.
func (mr *MockContextMockRecorder) GetHeader(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeader", reflect.TypeOf((*MockContext)(nil).GetHeader), key)
}

// GetRawData mocks base method.
func (m *MockContext) GetRawData() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRawData")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRawData indicates an expected call of GetRawData.
func (mr *MockContextMockRecorder) GetRawData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawData", reflect.TypeOf((*MockContext)(nil).GetRawData))
}

// SetSameSite mocks base method.
func (m *MockContext) SetSameSite(samesite http.SameSite) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSameSite", samesite)
}

// SetSameSite indicates an expected call of SetSameSite.
func (mr *MockContextMockRecorder) SetSameSite(samesite interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSameSite", reflect.TypeOf((*MockContext)(nil).SetSameSite), samesite)
}

// SetCookie mocks base method.
func (m *MockContext) SetCookie(name, value string, maxAge int, path, domain string, secure, httpOnly bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCookie", name, value, maxAge, path, domain, secure, httpOnly)
}

// SetCookie indicates an expected call of SetCookie.
func (mr *MockContextMockRecorder) SetCookie(name, value, maxAge, path, domain, secure, httpOnly interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCookie", reflect.TypeOf((*MockContext)(nil).SetCookie), name, value, maxAge, path, domain, secure, httpOnly)
}

// Cookie mocks base method.
func (m *MockContext) Cookie(name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cookie", name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cookie indicates an expected call of Cookie.
func (mr *MockContextMockRecorder) Cookie(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cookie", reflect.TypeOf((*MockContext)(nil).Cookie), name)
}

// Render mocks base method.
func (m *MockContext) Render(code int, r render.Render) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Render", code, r)
}

// Render indicates an expected call of Render.
func (mr *MockContextMockRecorder) Render(code, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Render", reflect.TypeOf((*MockContext)(nil).Render), code, r)
}

// HTML mocks base method.
func (m *MockContext) HTML(code int, name string, obj interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HTML", code, name, obj)
}

// HTML indicates an expected call of HTML.
func (mr *MockContextMockRecorder) HTML(code, name, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTML", reflect.TypeOf((*MockContext)(nil).HTML), code, name, obj)
}

// IndentedJSON mocks base method.
func (m *MockContext) IndentedJSON(code int, obj interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IndentedJSON", code, obj)
}

// IndentedJSON indicates an expected call of IndentedJSON.
func (mr *MockContextMockRecorder) IndentedJSON(code, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndentedJSON", reflect.TypeOf((*MockContext)(nil).IndentedJSON), code, obj)
}

// SecureJSON mocks base method.
func (m *MockContext) SecureJSON(code int, obj interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SecureJSON", code, obj)
}

// SecureJSON indicates an expected call of SecureJSON.
func (mr *MockContextMockRecorder) SecureJSON(code, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecureJSON", reflect.TypeOf((*MockContext)(nil).SecureJSON), code, obj)
}

// JSONP mocks base method.
func (m *MockContext) JSONP(code int, obj interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "JSONP", code, obj)
}

// JSONP indicates an expected call of JSONP.
func (mr *MockContextMockRecorder) JSONP(code, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONP", reflect.TypeOf((*MockContext)(nil).JSONP), code, obj)
}

// JSON mocks base method.
func (m *MockContext) JSON(code int, obj interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "JSON", code, obj)
}

// JSON indicates an expected call of JSON.
func (mr *MockContextMockRecorder) JSON(code, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSON", reflect.TypeOf((*MockContext)(nil).JSON), code, obj)
}

// AsciiJSON mocks base method.
func (m *MockContext) AsciiJSON(code int, obj interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AsciiJSON", code, obj)
}

// AsciiJSON indicates an expected call of AsciiJSON.
func (mr *MockContextMockRecorder) AsciiJSON(code, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsciiJSON", reflect.TypeOf((*MockContext)(nil).AsciiJSON), code, obj)
}

// PureJSON mocks base method.
func (m *MockContext) PureJSON(code int, obj interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PureJSON", code, obj)
}

// PureJSON indicates an expected call of PureJSON.
func (mr *MockContextMockRecorder) PureJSON(code, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PureJSON", reflect.TypeOf((*MockContext)(nil).PureJSON), code, obj)
}

// XML mocks base method.
func (m *MockContext) XML(code int, obj interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "XML", code, obj)
}

// XML indicates an expected call of XML.
func (mr *MockContextMockRecorder) XML(code, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XML", reflect.TypeOf((*MockContext)(nil).XML), code, obj)
}

// YAML mocks base method.
func (m *MockContext) YAML(code int, obj interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "YAML", code, obj)
}

// YAML indicates an expected call of YAML.
func (mr *MockContextMockRecorder) YAML(code, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "YAML", reflect.TypeOf((*MockContext)(nil).YAML), code, obj)
}

// ProtoBuf mocks base method.
func (m *MockContext) ProtoBuf(code int, obj interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProtoBuf", code, obj)
}

// ProtoBuf indicates an expected call of ProtoBuf.
func (mr *MockContextMockRecorder) ProtoBuf(code, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProtoBuf", reflect.TypeOf((*MockContext)(nil).ProtoBuf), code, obj)
}

// String mocks base method.
func (m *MockContext) String(code int, format string, values ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{code, format}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "String", varargs...)
}

// String indicates an expected call of String.
func (mr *MockContextMockRecorder) String(code, format interface{}, values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{code, format}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockContext)(nil).String), varargs...)
}

// Redirect mocks base method.
func (m *MockContext) Redirect(code int, location string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Redirect", code, location)
}

// Redirect indicates an expected call of Redirect.
func (mr *MockContextMockRecorder) Redirect(code, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Redirect", reflect.TypeOf((*MockContext)(nil).Redirect), code, location)
}

// Data mocks base method.
func (m *MockContext) Data(code int, contentType string, data []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Data", code, contentType, data)
}

// Data indicates an expected call of Data.
func (mr *MockContextMockRecorder) Data(code, contentType, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Data", reflect.TypeOf((*MockContext)(nil).Data), code, contentType, data)
}

// DataFromReader mocks base method.
func (m *MockContext) DataFromReader(code int, contentLength int64, contentType string, reader io.Reader, extraHeaders map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DataFromReader", code, contentLength, contentType, reader, extraHeaders)
}

// DataFromReader indicates an expected call of DataFromReader.
func (mr *MockContextMockRecorder) DataFromReader(code, contentLength, contentType, reader, extraHeaders interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataFromReader", reflect.TypeOf((*MockContext)(nil).DataFromReader), code, contentLength, contentType, reader, extraHeaders)
}

// File mocks base method.
func (m *MockContext) File(filepath string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "File", filepath)
}

// File indicates an expected call of File.
func (mr *MockContextMockRecorder) File(filepath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "File", reflect.TypeOf((*MockContext)(nil).File), filepath)
}

// FileFromFS mocks base method.
func (m *MockContext) FileFromFS(filepath string, fs http.FileSystem) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FileFromFS", filepath, fs)
}

// FileFromFS indicates an expected call of FileFromFS.
func (mr *MockContextMockRecorder) FileFromFS(filepath, fs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileFromFS", reflect.TypeOf((*MockContext)(nil).FileFromFS), filepath, fs)
}

// FileAttachment mocks base method.
func (m *MockContext) FileAttachment(filepath, filename string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FileAttachment", filepath, filename)
}

// FileAttachment indicates an expected call of FileAttachment.
func (mr *MockContextMockRecorder) FileAttachment(filepath, filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileAttachment", reflect.TypeOf((*MockContext)(nil).FileAttachment), filepath, filename)
}

// SSEvent mocks base method.
func (m *MockContext) SSEvent(name string, message interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SSEvent", name, message)
}

// SSEvent indicates an expected call of SSEvent.
func (mr *MockContextMockRecorder) SSEvent(name, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSEvent", reflect.TypeOf((*MockContext)(nil).SSEvent), name, message)
}

// Stream mocks base method.
func (m *MockContext) Stream(step func(io.Writer) bool) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stream", step)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Stream indicates an expected call of Stream.
func (mr *MockContextMockRecorder) Stream(step interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stream", reflect.TypeOf((*MockContext)(nil).Stream), step)
}

// Negotiate mocks base method.
func (m *MockContext) Negotiate(code int, config gin.Negotiate) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Negotiate", code, config)
}

// Negotiate indicates an expected call of Negotiate.
func (mr *MockContextMockRecorder) Negotiate(code, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Negotiate", reflect.TypeOf((*MockContext)(nil).Negotiate), code, config)
}

// NegotiateFormat mocks base method.
func (m *MockContext) NegotiateFormat(offered ...string) string {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range offered {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NegotiateFormat", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// NegotiateFormat indicates an expected call of NegotiateFormat.
func (mr *MockContextMockRecorder) NegotiateFormat(offered ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NegotiateFormat", reflect.TypeOf((*MockContext)(nil).NegotiateFormat), offered...)
}

// SetAccepted mocks base method.
func (m *MockContext) SetAccepted(formats ...string) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range formats {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "SetAccepted", varargs...)
}

// SetAccepted indicates an expected call of SetAccepted.
func (mr *MockContextMockRecorder) SetAccepted(formats ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccepted", reflect.TypeOf((*MockContext)(nil).SetAccepted), formats...)
}

// Deadline mocks base method.
func (m *MockContext) Deadline() (time.Time, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deadline")
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Deadline indicates an expected call of Deadline.
func (mr *MockContextMockRecorder) Deadline() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deadline", reflect.TypeOf((*MockContext)(nil).Deadline))
}

// Done mocks base method.
func (m *MockContext) Done() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Done indicates an expected call of Done.
func (mr *MockContextMockRecorder) Done() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockContext)(nil).Done))
}

// Err mocks base method.
func (m *MockContext) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockContextMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockContext)(nil).Err))
}

// Value mocks base method.
func (m *MockContext) Value(key interface{}) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value", key)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockContextMockRecorder) Value(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockContext)(nil).Value), key)
}
