// Code generated by MockGen. DO NOT EDIT.
// Source: order_service.go

// Package services is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	models "order/models"
	reflect "reflect"
)

// MockOrderService is a mock of OrderService interface.
type MockOrderService struct {
	ctrl     *gomock.Controller
	recorder *MockOrderServiceMockRecorder
}

// MockOrderServiceMockRecorder is the mock recorder for MockOrderService.
type MockOrderServiceMockRecorder struct {
	mock *MockOrderService
}

// NewMockOrderService creates a new mock instance.
func NewMockOrderService(ctrl *gomock.Controller) *MockOrderService {
	mock := &MockOrderService{ctrl: ctrl}
	mock.recorder = &MockOrderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderService) EXPECT() *MockOrderServiceMockRecorder {
	return m.recorder
}

// FindAllOrderByUserID mocks base method.
func (m *MockOrderService) FindAllOrderByUserID(userID int) (models.Orders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllOrderByUserID", userID)
	ret0, _ := ret[0].(models.Orders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllOrderByUserID indicates an expected call of FindAllOrderByUserID.
func (mr *MockOrderServiceMockRecorder) FindAllOrderByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllOrderByUserID", reflect.TypeOf((*MockOrderService)(nil).FindAllOrderByUserID), userID)
}
